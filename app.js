const db = require("./firebase").db;const firebase = require("firebase");const express = require("express")const cors = require("cors")const bodyParser = require("body-parser")const mongoose = require("mongoose")const app = express()mongoose.connect('mongodb+srv://Test:Test123@cluster0.5eydy.mongodb.net/url',{useNewUrlParser: true, useUnifiedTopology: true})//middlewareapp.use(cors())app.use(bodyParser.json())const urlSchema = mongoose.Schema({        shortenedURL: String,        originalURL: String})const Url = mongoose.model('urls',urlSchema)const userSchema = mongoose.Schema({    userID : String,    userInfo: {},    urls:[urlSchema]})const User = mongoose.model('users',userSchema);//Routesapp.get('/',(req,res)=>{    Url.find({},(err,data)=>{        if (data){           res.send(data)        }else{            if (err){                res.send(err)            }else {                res.send('no such ')            }        }    })})app.post('/new/url',(req,res)=>{    const {originalUrl,userID,shortenedUrl} = req.body   const shortUrl = new Url({       shortenedURL: shortenedUrl,       originalURL: originalUrl   })    if (shortenedUrl==='new'){        res.status(404).json('url exists')    }else {        db.collection("urls").get()            .then(function(querySnapshot) {                querySnapshot.forEach(function(doc) {                    // doc.data() is never undefined for query doc snapshots                    if (doc.id === shortenedUrl){                        res.status(400).json({message:"URL exists. Try with a different backward URL.",status:400})                    }else {                        db                            .collection("urls")                            .doc(shortenedUrl)                            .set({shortenedUrl:shortenedUrl,originalUrl:originalUrl})                            .then(()=>{                              res.status(200).json({                                  message:"URL successfully deployed at ",                                  status:200,                                  url: shortenedUrl                            })                            })                            .catch((err)=> res.status(400).json(err))                    }                    console.log(doc.id, " => ", doc.data());                });            });    }})app.get('/:shortenedUrl',(req,res)=>{    const {shortenedUrl} = req.params;    db.collection("urls").get()        .then(function(querySnapshot) {            querySnapshot.forEach(function(doc) {                // doc.data() is never undefined for query doc snapshots                if (doc.id === shortenedUrl){                    const originalUrl = doc.data().originalUrl                    res.redirect(originalUrl)                }                console.log(doc.id, " => ", doc.data());            });        });})app.post('/new/user',(req, res) => {    const {userID,userInfo} = req.body    db.collection("users").get()        .then(function(querySnapshot) {            querySnapshot.forEach(function(doc) {                // doc.data() is never undefined for query doc snapshots                //it is no selector because if no users exist it will not crash the server.                if (doc.id!==userID){                    db                        .collection("users")                        .doc(userID)                        .set({userInfo: userInfo,urls:[]})                        .then(()=>res.status(200).json('user added'))                        .catch((err)=> res.status(400).json(err))                }else {                    //res.status(400).json("user exists");                }            });        });})app.post('/user',(req, res) => {    const {userID} = req.body;    User.findOne({userID:userID},(err,user)=>{        if (err){            res.json(err)        }else {            if (user){                res.status(200).json(user)            }else {                res.status(400).json('no Such user')            }        }    })})//Listen commandapp.listen(process.env.PORT||3000,(req,res)=>{    console.log("Server listening on port 3000.")})